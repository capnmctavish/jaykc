name: Commit Simulator

on:
  schedule:
    - cron: '0 15 * * *'  # Run every day at 11 AM EDT (15:00 UTC)
  workflow_dispatch:
    inputs:
      cron_schedule:
        description: 'Cron schedule for the workflow'
        required: false
        default: '0 */4 * * *'

jobs:
  simulate-commit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        pip install PyGithub

    - name: Run commit simulator
      env:
        MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        REPOSITORY: ${{ secrets.REPOSITORY }}
        COMMIT_MESSAGES_FILE: ${{ secrets.COMMIT_MESSAGES_FILE }}
      run: |
        python <<EOF
        import os
        import random
        import subprocess
        from datetime import datetime, timedelta
        from github import Github
        from github import InputGitTreeElement
        import time

        GITHUB_TOKEN = os.getenv('MY_GITHUB_TOKEN')
        REPOSITORY = os.getenv('REPOSITORY')
        COMMIT_MESSAGES_FILE = os.getenv('COMMIT_MESSAGES_FILE')

        g = Github(GITHUB_TOKEN)

        def get_random_commit_message():
            with open(COMMIT_MESSAGES_FILE, 'r') as file:
                messages = file.readlines()
            return random.choice(messages).strip()

        def simulate_commit():
            repo = g.get_repo(REPOSITORY)
            commit_message = get_random_commit_message()

            base_commit = repo.get_branch("main").commit
            base_tree = repo.get_git_tree(base_commit.commit.tree.sha)

            tree_elements = [
                InputGitTreeElement(
                    path=element.path,
                    mode=element.mode,
                    type=element.type,
                    sha=element.sha
                ) for element in base_tree.tree
            ]

            new_tree = repo.create_git_tree(tree_elements)
            new_commit = repo.create_git_commit(commit_message, new_tree, [base_commit.commit])
            ref = repo.get_git_ref("heads/main")
            ref.edit(new_commit.sha)

            print(f"Simulated commit to {REPOSITORY} with message: '{commit_message}'")

        def schedule_commits():
            commit_count = random.randint(3, 5)  # Number of commits per run
            for _ in range(commit_count):
                simulate_commit()
                time_to_wait = random.randint(0, 300)  # Wait between 0 and 5 minutes
                print(f"Waiting for {time_to_wait} seconds before next commit.")
                time.sleep(time_to_wait)

        schedule_commits()
        EOF
